#ifndef NEWVISUAL_H
#define NEWVISUAL_H
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

void write_vtkFile(const char* szProblem, Domain domain, Fullgrid* _fullgrid) {


	int i=0,j=0;
	char szFileName[80];
	FILE *fp=NULL;
	sprintf( szFileName, "%s.vtk", szProblem );
	fp = fopen( szFileName, "w");

	int imax = _fullgrid->_Npoints[0]-1;
	int jmax = _fullgrid->_Npoints[1]-1;
	double dx = _fullgrid->_mesh_size[0];
	double dy = _fullgrid->_mesh_size[1];
	double originX = domain.start_point[0];
	double originY = domain.start_point[1];

	//write vtkHeader

	fprintf(fp,"# vtk DataFile Version 2.0\n");
	fprintf(fp,"generated by Mahyar Valizadeh \n");
	fprintf(fp,"ASCII\n");
	fprintf(fp,"\n");
	fprintf(fp,"DATASET STRUCTURED_GRID\n");
	fprintf(fp,"DIMENSIONS  %i %i 1 \n", imax+1, jmax+1);
	fprintf(fp,"POINTS %i float\n", (imax+1)*(jmax+1) );
	fprintf(fp,"\n");

	//write vtk PointCoordinates
	for( j = 0; j < jmax+1; j++) {
		for( i = 0; i < imax+1; i++) {
			fprintf(fp, "%f %f 0\n", originX+(i*dx), originY+(j*dy) );
		}
	}

	///*
	//write grid point function values in cell data representation
	fprintf(fp,"\n");
	fprintf(fp,"CELL_DATA %i \n", ((imax)*(jmax)) );
	fprintf(fp, "SCALARS f_value float 1\n");
	fprintf(fp, "LOOKUP_TABLE default \n");
	for(j = 1; j < jmax+1; j++) {
		for(i = 1; i < imax+1; i++) {
			fprintf(fp, "%f\n", _fullgrid->function_values[i][j] );
		}
	}
	//*/

	/*
    //write grid point function values in point data representation
    fprintf(fp,"\n");
    fprintf(fp,"POINT_DATA %i \n", ((imax+1)*(jmax+1)) );
    fprintf(fp, "SCALARS f_value float 1\n");
    fprintf(fp, "LOOKUP_TABLE default \n");
    for(j = 0; j < jmax+1; j++) {
        for(i = 0; i < imax+1; i++) {
            fprintf(fp, "%f\n", _fullgrid->function_values[i][j] );
        }
    }
	 */
	fclose(fp);

}

#endif
